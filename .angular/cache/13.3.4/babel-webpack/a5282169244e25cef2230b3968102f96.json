{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType, createEffect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { tap } from 'rxjs/operators';\nimport { AuthActionTypes, LogInSuccess, LogInFailure, SignUpSuccess, SignUpFailure } from '../actions/auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthEffects {\n  constructor(actions, actions$, authService, router) {\n    this.actions = actions;\n    this.actions$ = actions$;\n    this.authService = authService;\n    this.router = router;\n    this.Login = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.LOGIN), map(action => action.payload), switchMap(payload => {\n      return this.authService.logIn(payload.username, payload.password).pipe(map(user => {\n        return new LogInSuccess({\n          token: user.token,\n          username: user.username,\n          firstName: user.firstName,\n          lastName: user.lastName\n        });\n      }), catchError(error => {\n        return of(new LogInFailure({\n          error: error\n        }));\n      }));\n    })));\n    this.LogInSuccess = this.actions.pipe(ofType(AuthActionTypes.LOGIN_SUCCESS), tap(user => {\n      localStorage.setItem('token', user.payload.token);\n      localStorage.setItem('username', user.payload.username);\n      localStorage.setItem('firstName', user.payload.firstName);\n      localStorage.setItem('lastName', user.payload.lastName);\n      this.router.navigateByUrl('/');\n    }));\n    this.LogInFailure = this.actions.pipe(ofType(AuthActionTypes.LOGIN_FAILURE));\n    this.SignUp = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.SIGNUP), map(action => action.payload), switchMap(payload => {\n      return this.authService.signUp(payload.username, payload.password, payload.firstName, payload.lastName).pipe(map(user => {\n        return new SignUpSuccess({\n          token: user.token,\n          username: user.username,\n          firstName: user.firstName,\n          lastName: user.lastName\n        });\n      }), catchError(error => {\n        return of(new SignUpFailure({\n          error: error\n        }));\n      }));\n    })));\n    this.SignUpSuccess = this.actions.pipe(ofType(AuthActionTypes.SIGNUP_SUCCESS), tap(user => {\n      localStorage.setItem('token', user.payload.token);\n      localStorage.setItem('username', user.payload.username);\n      localStorage.setItem('firstName', user.payload.firstName);\n      localStorage.setItem('lastName', user.payload.lastName);\n      this.router.navigateByUrl('/');\n    }));\n    this.SignUpFailure = this.actions.pipe(ofType(AuthActionTypes.SIGNUP_FAILURE));\n    this.LogOut = this.actions.pipe(ofType(AuthActionTypes.LOGOUT), tap(() => {\n      localStorage.removeItem('token');\n      localStorage.removeItem('username');\n      localStorage.removeItem('firstName');\n      localStorage.removeItem('lastName');\n      this.router.navigateByUrl('/log-in');\n    }));\n  }\n\n}\n\nAuthEffects.ɵfac = function AuthEffects_Factory(t) {\n  return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router));\n};\n\nAuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthEffects,\n  factory: AuthEffects.ɵfac\n});\n\n__decorate([Effect({\n  dispatch: false\n})], AuthEffects.prototype, \"LogInSuccess\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n})], AuthEffects.prototype, \"LogInFailure\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n})], AuthEffects.prototype, \"SignUpSuccess\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n})], AuthEffects.prototype, \"SignUpFailure\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n})], AuthEffects.prototype, \"LogOut\", void 0);","map":null,"metadata":{},"sourceType":"module"}